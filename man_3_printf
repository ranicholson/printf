.TH man 3 "2020-10-27" "Linux" "_printf man page"
.SH NAME
.B _printf
- Function that converts data values to easily readable text sequences
.SH SYNOPSIS
.B #include "holberton.h"
.P
.B int _printf(const char
.I *format
.B , ...);
.SH DESCRIPTION
.B_printf
Generates output according to the
.I format
described below. It writes output based on a
.I format
string that contains specifiers that dictate how arguments are converted for printing. It writes output to the standard output stream, i.e.
.I stdout.
.SS Format of the format string
The format string is a character string. It can contain directives, which are characters (aside from %) that are copied to
.I stdout.
It can also contain conversion specifiers which get subsequent arguments. A conversion specifier begins with
.B %
and ends with the conversion specifier itself, which is either a letter or a
.B %.
The listed arguments must have the appropriate type for the conversion specifier. The arguments are accessed in the order they are given.
.SS Conversion specifiers
Conversion specifiers are characters that specify how the output is to be formatted.
Conversion specifiers will always be preceeded by
.B %.
.P
The conversion specifiers and their purposes are:
.P
.B %
- A
.B %
following a
.B %
will output a single
.B %.
.P
.B b
- Converts an
.I unsigned int
to binary.
.P
.B c
- Converts argument to an
.I char.
.P
.B d,
.B i
- Converts
.I int
to signed decimal notation.
.P
.B o
- Converts
.I unsigned integer
to unsigned octal.
.P
.B p
- Prints the
.I void *
in hexadecimal.
.P
.B r
- reverses and then prints a string.
.P
.B R
- prints a string using rot13 encryption.
.P
.B s
- Writes characters from a
.I char
string up to a terminating null byte('0').
.P
.B S
- prints a string, but will replace any non-printable ASCII value with the value's hex equivalent.
.P
.B u
- Converts an
.I unsigned int
to unsigned decimal.
.P
.B x
- Converts an
.I unsigned int
to hexadecimal notation using abcdef.
.P
.B X
- Converts an
.I unsigned int
to hexadecimal format using ABCDEF.
.SH RETURN VALUE
The return value is equal to the number of characters printed by the function.
.P
Upon encountering an error the return value will be -1.
.SH ERRORS
In the event of an error, i.e. if the write system call fails, errno will be set to -1.
.SH BUGS
If you use a format speicifer in the format string but do not include arguements, behavior is undefined.
.SH EXAMPLE
To print and integer 4, then a comma, then a space, then the character "t":
.P
.EX
#include "holberton.h"
int main(void)
{
	char ex = 't';
	printf("%d, %c", 4, ex);
	return (0);
}
.EE
.SH SEE ALSO
printf(3)